//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace IANET_Marshall.WS_FileUpload {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="WS_FileUploadSoap", Namespace="http://isys.ianetwork.net/")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MarshalByRefObject))]
    public partial class WS_FileUpload : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback LoadEMSOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpLoadEMSOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoadEMSWithResultsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAssignmentID_FileNumberOperationCompleted;
        
        private System.Threading.SendOrPostCallback GeIsysID_ClaimNumberOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetClaimNumberbyIsysIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetClaimNumberRequiredOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddAuditNoteOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEMSForAssignmentOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAssignment_AuditResultsOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReceivePictureOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReceivePictureToAssignmentID_NewOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReceivePictureToAssignmentID_NewLargeFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReceivePictureToAssignmentIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReceiveDocumentsOperationCompleted;
        
        private System.Threading.SendOrPostCallback ValidateUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReceiveDocumentsAssignmentCynCastOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReceiveDocumentsAssignmentOperationCompleted;
        
        private System.Threading.SendOrPostCallback VerifyInternalUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback VerifyUserCarrierOperationCompleted;
        
        private System.Threading.SendOrPostCallback VerifyUserAppraiserOperationCompleted;
        
        private System.Threading.SendOrPostCallback ValidateIsysIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback ValidateIsysIDAndAppraiserUserOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public WS_FileUpload() {
            this.Url = "http://test1.ianetwork.net/WS/WS_FileUpload.asmx";
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event LoadEMSCompletedEventHandler LoadEMSCompleted;
        
        /// <remarks/>
        public event UpLoadEMSCompletedEventHandler UpLoadEMSCompleted;
        
        /// <remarks/>
        public event LoadEMSWithResultsCompletedEventHandler LoadEMSWithResultsCompleted;
        
        /// <remarks/>
        public event GetAssignmentID_FileNumberCompletedEventHandler GetAssignmentID_FileNumberCompleted;
        
        /// <remarks/>
        public event GeIsysID_ClaimNumberCompletedEventHandler GeIsysID_ClaimNumberCompleted;
        
        /// <remarks/>
        public event GetClaimNumberbyIsysIDCompletedEventHandler GetClaimNumberbyIsysIDCompleted;
        
        /// <remarks/>
        public event GetClaimNumberRequiredCompletedEventHandler GetClaimNumberRequiredCompleted;
        
        /// <remarks/>
        public event AddAuditNoteCompletedEventHandler AddAuditNoteCompleted;
        
        /// <remarks/>
        public event GetEMSForAssignmentCompletedEventHandler GetEMSForAssignmentCompleted;
        
        /// <remarks/>
        public event GetAssignment_AuditResultsCompletedEventHandler GetAssignment_AuditResultsCompleted;
        
        /// <remarks/>
        public event ReceivePictureCompletedEventHandler ReceivePictureCompleted;
        
        /// <remarks/>
        public event ReceivePictureToAssignmentID_NewCompletedEventHandler ReceivePictureToAssignmentID_NewCompleted;
        
        /// <remarks/>
        public event ReceivePictureToAssignmentID_NewLargeFileCompletedEventHandler ReceivePictureToAssignmentID_NewLargeFileCompleted;
        
        /// <remarks/>
        public event ReceivePictureToAssignmentIDCompletedEventHandler ReceivePictureToAssignmentIDCompleted;
        
        /// <remarks/>
        public event ReceiveDocumentsCompletedEventHandler ReceiveDocumentsCompleted;
        
        /// <remarks/>
        public event ValidateUserCompletedEventHandler ValidateUserCompleted;
        
        /// <remarks/>
        public event ReceiveDocumentsAssignmentCynCastCompletedEventHandler ReceiveDocumentsAssignmentCynCastCompleted;
        
        /// <remarks/>
        public event ReceiveDocumentsAssignmentCompletedEventHandler ReceiveDocumentsAssignmentCompleted;
        
        /// <remarks/>
        public event VerifyInternalUserCompletedEventHandler VerifyInternalUserCompleted;
        
        /// <remarks/>
        public event VerifyUserCarrierCompletedEventHandler VerifyUserCarrierCompleted;
        
        /// <remarks/>
        public event VerifyUserAppraiserCompletedEventHandler VerifyUserAppraiserCompleted;
        
        /// <remarks/>
        public event ValidateIsysIDCompletedEventHandler ValidateIsysIDCompleted;
        
        /// <remarks/>
        public event ValidateIsysIDAndAppraiserUserCompletedEventHandler ValidateIsysIDAndAppraiserUserCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://isys.ianetwork.net/LoadEMS", RequestNamespace="http://isys.ianetwork.net/", ResponseNamespace="http://isys.ianetwork.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool LoadEMS(
                    string EMSString, 
                    string AssignmentID, 
                    string UserName, 
                    string FileNumber, 
                    string EMSTotal, 
                    string EMSSuppTotal, 
                    string Total, 
                    string RFAddress1, 
                    string RepairFacility, 
                    string RFAddress2, 
                    string RFCity, 
                    string RFState, 
                    string RFZip, 
                    string FacilityContact, 
                    string FacilityContact2, 
                    string RFTaxID, 
                    string RFPhone, 
                    string RFFax, 
                    string CarState, 
                    string VIN, 
                    string Year, 
                    string Make, 
                    string Model, 
                    string BodyStyle, 
                    string Deductible, 
                    string Password, 
                    string EMSSystem) {
            object[] results = this.Invoke("LoadEMS", new object[] {
                        EMSString,
                        AssignmentID,
                        UserName,
                        FileNumber,
                        EMSTotal,
                        EMSSuppTotal,
                        Total,
                        RFAddress1,
                        RepairFacility,
                        RFAddress2,
                        RFCity,
                        RFState,
                        RFZip,
                        FacilityContact,
                        FacilityContact2,
                        RFTaxID,
                        RFPhone,
                        RFFax,
                        CarState,
                        VIN,
                        Year,
                        Make,
                        Model,
                        BodyStyle,
                        Deductible,
                        Password,
                        EMSSystem});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void LoadEMSAsync(
                    string EMSString, 
                    string AssignmentID, 
                    string UserName, 
                    string FileNumber, 
                    string EMSTotal, 
                    string EMSSuppTotal, 
                    string Total, 
                    string RFAddress1, 
                    string RepairFacility, 
                    string RFAddress2, 
                    string RFCity, 
                    string RFState, 
                    string RFZip, 
                    string FacilityContact, 
                    string FacilityContact2, 
                    string RFTaxID, 
                    string RFPhone, 
                    string RFFax, 
                    string CarState, 
                    string VIN, 
                    string Year, 
                    string Make, 
                    string Model, 
                    string BodyStyle, 
                    string Deductible, 
                    string Password, 
                    string EMSSystem) {
            this.LoadEMSAsync(EMSString, AssignmentID, UserName, FileNumber, EMSTotal, EMSSuppTotal, Total, RFAddress1, RepairFacility, RFAddress2, RFCity, RFState, RFZip, FacilityContact, FacilityContact2, RFTaxID, RFPhone, RFFax, CarState, VIN, Year, Make, Model, BodyStyle, Deductible, Password, EMSSystem, null);
        }
        
        /// <remarks/>
        public void LoadEMSAsync(
                    string EMSString, 
                    string AssignmentID, 
                    string UserName, 
                    string FileNumber, 
                    string EMSTotal, 
                    string EMSSuppTotal, 
                    string Total, 
                    string RFAddress1, 
                    string RepairFacility, 
                    string RFAddress2, 
                    string RFCity, 
                    string RFState, 
                    string RFZip, 
                    string FacilityContact, 
                    string FacilityContact2, 
                    string RFTaxID, 
                    string RFPhone, 
                    string RFFax, 
                    string CarState, 
                    string VIN, 
                    string Year, 
                    string Make, 
                    string Model, 
                    string BodyStyle, 
                    string Deductible, 
                    string Password, 
                    string EMSSystem, 
                    object userState) {
            if ((this.LoadEMSOperationCompleted == null)) {
                this.LoadEMSOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoadEMSOperationCompleted);
            }
            this.InvokeAsync("LoadEMS", new object[] {
                        EMSString,
                        AssignmentID,
                        UserName,
                        FileNumber,
                        EMSTotal,
                        EMSSuppTotal,
                        Total,
                        RFAddress1,
                        RepairFacility,
                        RFAddress2,
                        RFCity,
                        RFState,
                        RFZip,
                        FacilityContact,
                        FacilityContact2,
                        RFTaxID,
                        RFPhone,
                        RFFax,
                        CarState,
                        VIN,
                        Year,
                        Make,
                        Model,
                        BodyStyle,
                        Deductible,
                        Password,
                        EMSSystem}, this.LoadEMSOperationCompleted, userState);
        }
        
        private void OnLoadEMSOperationCompleted(object arg) {
            if ((this.LoadEMSCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoadEMSCompleted(this, new LoadEMSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://isys.ianetwork.net/UpLoadEMS", RequestNamespace="http://isys.ianetwork.net/", ResponseNamespace="http://isys.ianetwork.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpLoadEMS(
                    string EMSString, 
                    string AssignmentID, 
                    string UserName, 
                    string FileNumber, 
                    string EMSTotal, 
                    string EMSSuppTotal, 
                    string Total, 
                    string RFAddress1, 
                    string RepairFacility, 
                    string RFAddress2, 
                    string RFCity, 
                    string RFState, 
                    string RFZip, 
                    string FacilityContact, 
                    string FacilityContact2, 
                    string RFTaxID, 
                    string RFPhone, 
                    string RFFax, 
                    string CarState, 
                    string VIN, 
                    string Year, 
                    string Make, 
                    string Model, 
                    string BodyStyle, 
                    string Deductible, 
                    string Password, 
                    string EMSSystem, 
                    string EMSVersion) {
            object[] results = this.Invoke("UpLoadEMS", new object[] {
                        EMSString,
                        AssignmentID,
                        UserName,
                        FileNumber,
                        EMSTotal,
                        EMSSuppTotal,
                        Total,
                        RFAddress1,
                        RepairFacility,
                        RFAddress2,
                        RFCity,
                        RFState,
                        RFZip,
                        FacilityContact,
                        FacilityContact2,
                        RFTaxID,
                        RFPhone,
                        RFFax,
                        CarState,
                        VIN,
                        Year,
                        Make,
                        Model,
                        BodyStyle,
                        Deductible,
                        Password,
                        EMSSystem,
                        EMSVersion});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpLoadEMSAsync(
                    string EMSString, 
                    string AssignmentID, 
                    string UserName, 
                    string FileNumber, 
                    string EMSTotal, 
                    string EMSSuppTotal, 
                    string Total, 
                    string RFAddress1, 
                    string RepairFacility, 
                    string RFAddress2, 
                    string RFCity, 
                    string RFState, 
                    string RFZip, 
                    string FacilityContact, 
                    string FacilityContact2, 
                    string RFTaxID, 
                    string RFPhone, 
                    string RFFax, 
                    string CarState, 
                    string VIN, 
                    string Year, 
                    string Make, 
                    string Model, 
                    string BodyStyle, 
                    string Deductible, 
                    string Password, 
                    string EMSSystem, 
                    string EMSVersion) {
            this.UpLoadEMSAsync(EMSString, AssignmentID, UserName, FileNumber, EMSTotal, EMSSuppTotal, Total, RFAddress1, RepairFacility, RFAddress2, RFCity, RFState, RFZip, FacilityContact, FacilityContact2, RFTaxID, RFPhone, RFFax, CarState, VIN, Year, Make, Model, BodyStyle, Deductible, Password, EMSSystem, EMSVersion, null);
        }
        
        /// <remarks/>
        public void UpLoadEMSAsync(
                    string EMSString, 
                    string AssignmentID, 
                    string UserName, 
                    string FileNumber, 
                    string EMSTotal, 
                    string EMSSuppTotal, 
                    string Total, 
                    string RFAddress1, 
                    string RepairFacility, 
                    string RFAddress2, 
                    string RFCity, 
                    string RFState, 
                    string RFZip, 
                    string FacilityContact, 
                    string FacilityContact2, 
                    string RFTaxID, 
                    string RFPhone, 
                    string RFFax, 
                    string CarState, 
                    string VIN, 
                    string Year, 
                    string Make, 
                    string Model, 
                    string BodyStyle, 
                    string Deductible, 
                    string Password, 
                    string EMSSystem, 
                    string EMSVersion, 
                    object userState) {
            if ((this.UpLoadEMSOperationCompleted == null)) {
                this.UpLoadEMSOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpLoadEMSOperationCompleted);
            }
            this.InvokeAsync("UpLoadEMS", new object[] {
                        EMSString,
                        AssignmentID,
                        UserName,
                        FileNumber,
                        EMSTotal,
                        EMSSuppTotal,
                        Total,
                        RFAddress1,
                        RepairFacility,
                        RFAddress2,
                        RFCity,
                        RFState,
                        RFZip,
                        FacilityContact,
                        FacilityContact2,
                        RFTaxID,
                        RFPhone,
                        RFFax,
                        CarState,
                        VIN,
                        Year,
                        Make,
                        Model,
                        BodyStyle,
                        Deductible,
                        Password,
                        EMSSystem,
                        EMSVersion}, this.UpLoadEMSOperationCompleted, userState);
        }
        
        private void OnUpLoadEMSOperationCompleted(object arg) {
            if ((this.UpLoadEMSCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpLoadEMSCompleted(this, new UpLoadEMSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://isys.ianetwork.net/LoadEMSWithResults", RequestNamespace="http://isys.ianetwork.net/", ResponseNamespace="http://isys.ianetwork.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet LoadEMSWithResults(
                    string EMSString, 
                    string AssignmentID, 
                    string UserName, 
                    string FileNumber, 
                    string EMSTotal, 
                    string EMSSuppTotal, 
                    string Total, 
                    string RFAddress1, 
                    string RepairFacility, 
                    string RFAddress2, 
                    string RFCity, 
                    string RFState, 
                    string RFZip, 
                    string FacilityContact, 
                    string FacilityContact2, 
                    string RFTaxID, 
                    string RFPhone, 
                    string RFFax, 
                    string CarState, 
                    string VIN, 
                    string Year, 
                    string Make, 
                    string Model, 
                    string BodyStyle, 
                    string Deductible, 
                    string Password, 
                    string EMSSystem) {
            object[] results = this.Invoke("LoadEMSWithResults", new object[] {
                        EMSString,
                        AssignmentID,
                        UserName,
                        FileNumber,
                        EMSTotal,
                        EMSSuppTotal,
                        Total,
                        RFAddress1,
                        RepairFacility,
                        RFAddress2,
                        RFCity,
                        RFState,
                        RFZip,
                        FacilityContact,
                        FacilityContact2,
                        RFTaxID,
                        RFPhone,
                        RFFax,
                        CarState,
                        VIN,
                        Year,
                        Make,
                        Model,
                        BodyStyle,
                        Deductible,
                        Password,
                        EMSSystem});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void LoadEMSWithResultsAsync(
                    string EMSString, 
                    string AssignmentID, 
                    string UserName, 
                    string FileNumber, 
                    string EMSTotal, 
                    string EMSSuppTotal, 
                    string Total, 
                    string RFAddress1, 
                    string RepairFacility, 
                    string RFAddress2, 
                    string RFCity, 
                    string RFState, 
                    string RFZip, 
                    string FacilityContact, 
                    string FacilityContact2, 
                    string RFTaxID, 
                    string RFPhone, 
                    string RFFax, 
                    string CarState, 
                    string VIN, 
                    string Year, 
                    string Make, 
                    string Model, 
                    string BodyStyle, 
                    string Deductible, 
                    string Password, 
                    string EMSSystem) {
            this.LoadEMSWithResultsAsync(EMSString, AssignmentID, UserName, FileNumber, EMSTotal, EMSSuppTotal, Total, RFAddress1, RepairFacility, RFAddress2, RFCity, RFState, RFZip, FacilityContact, FacilityContact2, RFTaxID, RFPhone, RFFax, CarState, VIN, Year, Make, Model, BodyStyle, Deductible, Password, EMSSystem, null);
        }
        
        /// <remarks/>
        public void LoadEMSWithResultsAsync(
                    string EMSString, 
                    string AssignmentID, 
                    string UserName, 
                    string FileNumber, 
                    string EMSTotal, 
                    string EMSSuppTotal, 
                    string Total, 
                    string RFAddress1, 
                    string RepairFacility, 
                    string RFAddress2, 
                    string RFCity, 
                    string RFState, 
                    string RFZip, 
                    string FacilityContact, 
                    string FacilityContact2, 
                    string RFTaxID, 
                    string RFPhone, 
                    string RFFax, 
                    string CarState, 
                    string VIN, 
                    string Year, 
                    string Make, 
                    string Model, 
                    string BodyStyle, 
                    string Deductible, 
                    string Password, 
                    string EMSSystem, 
                    object userState) {
            if ((this.LoadEMSWithResultsOperationCompleted == null)) {
                this.LoadEMSWithResultsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoadEMSWithResultsOperationCompleted);
            }
            this.InvokeAsync("LoadEMSWithResults", new object[] {
                        EMSString,
                        AssignmentID,
                        UserName,
                        FileNumber,
                        EMSTotal,
                        EMSSuppTotal,
                        Total,
                        RFAddress1,
                        RepairFacility,
                        RFAddress2,
                        RFCity,
                        RFState,
                        RFZip,
                        FacilityContact,
                        FacilityContact2,
                        RFTaxID,
                        RFPhone,
                        RFFax,
                        CarState,
                        VIN,
                        Year,
                        Make,
                        Model,
                        BodyStyle,
                        Deductible,
                        Password,
                        EMSSystem}, this.LoadEMSWithResultsOperationCompleted, userState);
        }
        
        private void OnLoadEMSWithResultsOperationCompleted(object arg) {
            if ((this.LoadEMSWithResultsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoadEMSWithResultsCompleted(this, new LoadEMSWithResultsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://isys.ianetwork.net/GetAssignmentID_FileNumber", RequestNamespace="http://isys.ianetwork.net/", ResponseNamespace="http://isys.ianetwork.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAssignmentID_FileNumber(string FileNumber, string UserName, string Password) {
            object[] results = this.Invoke("GetAssignmentID_FileNumber", new object[] {
                        FileNumber,
                        UserName,
                        Password});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAssignmentID_FileNumberAsync(string FileNumber, string UserName, string Password) {
            this.GetAssignmentID_FileNumberAsync(FileNumber, UserName, Password, null);
        }
        
        /// <remarks/>
        public void GetAssignmentID_FileNumberAsync(string FileNumber, string UserName, string Password, object userState) {
            if ((this.GetAssignmentID_FileNumberOperationCompleted == null)) {
                this.GetAssignmentID_FileNumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAssignmentID_FileNumberOperationCompleted);
            }
            this.InvokeAsync("GetAssignmentID_FileNumber", new object[] {
                        FileNumber,
                        UserName,
                        Password}, this.GetAssignmentID_FileNumberOperationCompleted, userState);
        }
        
        private void OnGetAssignmentID_FileNumberOperationCompleted(object arg) {
            if ((this.GetAssignmentID_FileNumberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAssignmentID_FileNumberCompleted(this, new GetAssignmentID_FileNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://isys.ianetwork.net/GeIsysID_ClaimNumber", RequestNamespace="http://isys.ianetwork.net/", ResponseNamespace="http://isys.ianetwork.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GeIsysID_ClaimNumber(string ClaimNumber, string UserName, string Password) {
            object[] results = this.Invoke("GeIsysID_ClaimNumber", new object[] {
                        ClaimNumber,
                        UserName,
                        Password});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GeIsysID_ClaimNumberAsync(string ClaimNumber, string UserName, string Password) {
            this.GeIsysID_ClaimNumberAsync(ClaimNumber, UserName, Password, null);
        }
        
        /// <remarks/>
        public void GeIsysID_ClaimNumberAsync(string ClaimNumber, string UserName, string Password, object userState) {
            if ((this.GeIsysID_ClaimNumberOperationCompleted == null)) {
                this.GeIsysID_ClaimNumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGeIsysID_ClaimNumberOperationCompleted);
            }
            this.InvokeAsync("GeIsysID_ClaimNumber", new object[] {
                        ClaimNumber,
                        UserName,
                        Password}, this.GeIsysID_ClaimNumberOperationCompleted, userState);
        }
        
        private void OnGeIsysID_ClaimNumberOperationCompleted(object arg) {
            if ((this.GeIsysID_ClaimNumberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GeIsysID_ClaimNumberCompleted(this, new GeIsysID_ClaimNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://isys.ianetwork.net/GetClaimNumberbyIsysID", RequestNamespace="http://isys.ianetwork.net/", ResponseNamespace="http://isys.ianetwork.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetClaimNumberbyIsysID(int IsysID, string UserName, string Password) {
            object[] results = this.Invoke("GetClaimNumberbyIsysID", new object[] {
                        IsysID,
                        UserName,
                        Password});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetClaimNumberbyIsysIDAsync(int IsysID, string UserName, string Password) {
            this.GetClaimNumberbyIsysIDAsync(IsysID, UserName, Password, null);
        }
        
        /// <remarks/>
        public void GetClaimNumberbyIsysIDAsync(int IsysID, string UserName, string Password, object userState) {
            if ((this.GetClaimNumberbyIsysIDOperationCompleted == null)) {
                this.GetClaimNumberbyIsysIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetClaimNumberbyIsysIDOperationCompleted);
            }
            this.InvokeAsync("GetClaimNumberbyIsysID", new object[] {
                        IsysID,
                        UserName,
                        Password}, this.GetClaimNumberbyIsysIDOperationCompleted, userState);
        }
        
        private void OnGetClaimNumberbyIsysIDOperationCompleted(object arg) {
            if ((this.GetClaimNumberbyIsysIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetClaimNumberbyIsysIDCompleted(this, new GetClaimNumberbyIsysIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://isys.ianetwork.net/GetClaimNumberRequired", RequestNamespace="http://isys.ianetwork.net/", ResponseNamespace="http://isys.ianetwork.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetClaimNumberRequired(int IsysID, string UserName, string Password) {
            object[] results = this.Invoke("GetClaimNumberRequired", new object[] {
                        IsysID,
                        UserName,
                        Password});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetClaimNumberRequiredAsync(int IsysID, string UserName, string Password) {
            this.GetClaimNumberRequiredAsync(IsysID, UserName, Password, null);
        }
        
        /// <remarks/>
        public void GetClaimNumberRequiredAsync(int IsysID, string UserName, string Password, object userState) {
            if ((this.GetClaimNumberRequiredOperationCompleted == null)) {
                this.GetClaimNumberRequiredOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetClaimNumberRequiredOperationCompleted);
            }
            this.InvokeAsync("GetClaimNumberRequired", new object[] {
                        IsysID,
                        UserName,
                        Password}, this.GetClaimNumberRequiredOperationCompleted, userState);
        }
        
        private void OnGetClaimNumberRequiredOperationCompleted(object arg) {
            if ((this.GetClaimNumberRequiredCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetClaimNumberRequiredCompleted(this, new GetClaimNumberRequiredCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://isys.ianetwork.net/AddAuditNote", RequestNamespace="http://isys.ianetwork.net/", ResponseNamespace="http://isys.ianetwork.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AddAuditNote(string IsysID, string UserName, string Password, string Note) {
            object[] results = this.Invoke("AddAuditNote", new object[] {
                        IsysID,
                        UserName,
                        Password,
                        Note});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddAuditNoteAsync(string IsysID, string UserName, string Password, string Note) {
            this.AddAuditNoteAsync(IsysID, UserName, Password, Note, null);
        }
        
        /// <remarks/>
        public void AddAuditNoteAsync(string IsysID, string UserName, string Password, string Note, object userState) {
            if ((this.AddAuditNoteOperationCompleted == null)) {
                this.AddAuditNoteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddAuditNoteOperationCompleted);
            }
            this.InvokeAsync("AddAuditNote", new object[] {
                        IsysID,
                        UserName,
                        Password,
                        Note}, this.AddAuditNoteOperationCompleted, userState);
        }
        
        private void OnAddAuditNoteOperationCompleted(object arg) {
            if ((this.AddAuditNoteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddAuditNoteCompleted(this, new AddAuditNoteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://isys.ianetwork.net/GetEMSForAssignment", RequestNamespace="http://isys.ianetwork.net/", ResponseNamespace="http://isys.ianetwork.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetEMSForAssignment(string IsysID, string UserName, string Password, string strSoft) {
            object[] results = this.Invoke("GetEMSForAssignment", new object[] {
                        IsysID,
                        UserName,
                        Password,
                        strSoft});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetEMSForAssignmentAsync(string IsysID, string UserName, string Password, string strSoft) {
            this.GetEMSForAssignmentAsync(IsysID, UserName, Password, strSoft, null);
        }
        
        /// <remarks/>
        public void GetEMSForAssignmentAsync(string IsysID, string UserName, string Password, string strSoft, object userState) {
            if ((this.GetEMSForAssignmentOperationCompleted == null)) {
                this.GetEMSForAssignmentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEMSForAssignmentOperationCompleted);
            }
            this.InvokeAsync("GetEMSForAssignment", new object[] {
                        IsysID,
                        UserName,
                        Password,
                        strSoft}, this.GetEMSForAssignmentOperationCompleted, userState);
        }
        
        private void OnGetEMSForAssignmentOperationCompleted(object arg) {
            if ((this.GetEMSForAssignmentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEMSForAssignmentCompleted(this, new GetEMSForAssignmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://isys.ianetwork.net/GetAssignment_AuditResults", RequestNamespace="http://isys.ianetwork.net/", ResponseNamespace="http://isys.ianetwork.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetAssignment_AuditResults(string FileNumber, string UserName, string Password) {
            object[] results = this.Invoke("GetAssignment_AuditResults", new object[] {
                        FileNumber,
                        UserName,
                        Password});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetAssignment_AuditResultsAsync(string FileNumber, string UserName, string Password) {
            this.GetAssignment_AuditResultsAsync(FileNumber, UserName, Password, null);
        }
        
        /// <remarks/>
        public void GetAssignment_AuditResultsAsync(string FileNumber, string UserName, string Password, object userState) {
            if ((this.GetAssignment_AuditResultsOperationCompleted == null)) {
                this.GetAssignment_AuditResultsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAssignment_AuditResultsOperationCompleted);
            }
            this.InvokeAsync("GetAssignment_AuditResults", new object[] {
                        FileNumber,
                        UserName,
                        Password}, this.GetAssignment_AuditResultsOperationCompleted, userState);
        }
        
        private void OnGetAssignment_AuditResultsOperationCompleted(object arg) {
            if ((this.GetAssignment_AuditResultsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAssignment_AuditResultsCompleted(this, new GetAssignment_AuditResultsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://isys.ianetwork.net/ReceivePicture", RequestNamespace="http://isys.ianetwork.net/", ResponseNamespace="http://isys.ianetwork.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ReceivePicture(string PicString, string UserName, string Password, string PicName) {
            object[] results = this.Invoke("ReceivePicture", new object[] {
                        PicString,
                        UserName,
                        Password,
                        PicName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ReceivePictureAsync(string PicString, string UserName, string Password, string PicName) {
            this.ReceivePictureAsync(PicString, UserName, Password, PicName, null);
        }
        
        /// <remarks/>
        public void ReceivePictureAsync(string PicString, string UserName, string Password, string PicName, object userState) {
            if ((this.ReceivePictureOperationCompleted == null)) {
                this.ReceivePictureOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReceivePictureOperationCompleted);
            }
            this.InvokeAsync("ReceivePicture", new object[] {
                        PicString,
                        UserName,
                        Password,
                        PicName}, this.ReceivePictureOperationCompleted, userState);
        }
        
        private void OnReceivePictureOperationCompleted(object arg) {
            if ((this.ReceivePictureCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReceivePictureCompleted(this, new ReceivePictureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://isys.ianetwork.net/ReceivePictureToAssignmentID_New", RequestNamespace="http://isys.ianetwork.net/", ResponseNamespace="http://isys.ianetwork.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ReceivePictureToAssignmentID_New(string PicString, string UserName, string Password, string PicName, string AssignID, int FolderID, string OrgEntityID, int FolderCode, int userType) {
            object[] results = this.Invoke("ReceivePictureToAssignmentID_New", new object[] {
                        PicString,
                        UserName,
                        Password,
                        PicName,
                        AssignID,
                        FolderID,
                        OrgEntityID,
                        FolderCode,
                        userType});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ReceivePictureToAssignmentID_NewAsync(string PicString, string UserName, string Password, string PicName, string AssignID, int FolderID, string OrgEntityID, int FolderCode, int userType) {
            this.ReceivePictureToAssignmentID_NewAsync(PicString, UserName, Password, PicName, AssignID, FolderID, OrgEntityID, FolderCode, userType, null);
        }
        
        /// <remarks/>
        public void ReceivePictureToAssignmentID_NewAsync(string PicString, string UserName, string Password, string PicName, string AssignID, int FolderID, string OrgEntityID, int FolderCode, int userType, object userState) {
            if ((this.ReceivePictureToAssignmentID_NewOperationCompleted == null)) {
                this.ReceivePictureToAssignmentID_NewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReceivePictureToAssignmentID_NewOperationCompleted);
            }
            this.InvokeAsync("ReceivePictureToAssignmentID_New", new object[] {
                        PicString,
                        UserName,
                        Password,
                        PicName,
                        AssignID,
                        FolderID,
                        OrgEntityID,
                        FolderCode,
                        userType}, this.ReceivePictureToAssignmentID_NewOperationCompleted, userState);
        }
        
        private void OnReceivePictureToAssignmentID_NewOperationCompleted(object arg) {
            if ((this.ReceivePictureToAssignmentID_NewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReceivePictureToAssignmentID_NewCompleted(this, new ReceivePictureToAssignmentID_NewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://isys.ianetwork.net/ReceivePictureToAssignmentID_NewLargeFile", RequestNamespace="http://isys.ianetwork.net/", ResponseNamespace="http://isys.ianetwork.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ReceivePictureToAssignmentID_NewLargeFile(FileStream PicString, string UserName, string Password, string PicName, string AssignID, int FolderID, string OrgEntityID, int FolderCode, int userType) {
            object[] results = this.Invoke("ReceivePictureToAssignmentID_NewLargeFile", new object[] {
                        PicString,
                        UserName,
                        Password,
                        PicName,
                        AssignID,
                        FolderID,
                        OrgEntityID,
                        FolderCode,
                        userType});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ReceivePictureToAssignmentID_NewLargeFileAsync(FileStream PicString, string UserName, string Password, string PicName, string AssignID, int FolderID, string OrgEntityID, int FolderCode, int userType) {
            this.ReceivePictureToAssignmentID_NewLargeFileAsync(PicString, UserName, Password, PicName, AssignID, FolderID, OrgEntityID, FolderCode, userType, null);
        }
        
        /// <remarks/>
        public void ReceivePictureToAssignmentID_NewLargeFileAsync(FileStream PicString, string UserName, string Password, string PicName, string AssignID, int FolderID, string OrgEntityID, int FolderCode, int userType, object userState) {
            if ((this.ReceivePictureToAssignmentID_NewLargeFileOperationCompleted == null)) {
                this.ReceivePictureToAssignmentID_NewLargeFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReceivePictureToAssignmentID_NewLargeFileOperationCompleted);
            }
            this.InvokeAsync("ReceivePictureToAssignmentID_NewLargeFile", new object[] {
                        PicString,
                        UserName,
                        Password,
                        PicName,
                        AssignID,
                        FolderID,
                        OrgEntityID,
                        FolderCode,
                        userType}, this.ReceivePictureToAssignmentID_NewLargeFileOperationCompleted, userState);
        }
        
        private void OnReceivePictureToAssignmentID_NewLargeFileOperationCompleted(object arg) {
            if ((this.ReceivePictureToAssignmentID_NewLargeFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReceivePictureToAssignmentID_NewLargeFileCompleted(this, new ReceivePictureToAssignmentID_NewLargeFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://isys.ianetwork.net/ReceivePictureToAssignmentID", RequestNamespace="http://isys.ianetwork.net/", ResponseNamespace="http://isys.ianetwork.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ReceivePictureToAssignmentID(string PicString, string UserName, string Password, string PicName, string AssignID, int FolderID, string OrgEntityID) {
            object[] results = this.Invoke("ReceivePictureToAssignmentID", new object[] {
                        PicString,
                        UserName,
                        Password,
                        PicName,
                        AssignID,
                        FolderID,
                        OrgEntityID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ReceivePictureToAssignmentIDAsync(string PicString, string UserName, string Password, string PicName, string AssignID, int FolderID, string OrgEntityID) {
            this.ReceivePictureToAssignmentIDAsync(PicString, UserName, Password, PicName, AssignID, FolderID, OrgEntityID, null);
        }
        
        /// <remarks/>
        public void ReceivePictureToAssignmentIDAsync(string PicString, string UserName, string Password, string PicName, string AssignID, int FolderID, string OrgEntityID, object userState) {
            if ((this.ReceivePictureToAssignmentIDOperationCompleted == null)) {
                this.ReceivePictureToAssignmentIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReceivePictureToAssignmentIDOperationCompleted);
            }
            this.InvokeAsync("ReceivePictureToAssignmentID", new object[] {
                        PicString,
                        UserName,
                        Password,
                        PicName,
                        AssignID,
                        FolderID,
                        OrgEntityID}, this.ReceivePictureToAssignmentIDOperationCompleted, userState);
        }
        
        private void OnReceivePictureToAssignmentIDOperationCompleted(object arg) {
            if ((this.ReceivePictureToAssignmentIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReceivePictureToAssignmentIDCompleted(this, new ReceivePictureToAssignmentIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://isys.ianetwork.net/ReceiveDocuments", RequestNamespace="http://isys.ianetwork.net/", ResponseNamespace="http://isys.ianetwork.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ReceiveDocuments(string DocString, string UserName, string Password, string DocName) {
            object[] results = this.Invoke("ReceiveDocuments", new object[] {
                        DocString,
                        UserName,
                        Password,
                        DocName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ReceiveDocumentsAsync(string DocString, string UserName, string Password, string DocName) {
            this.ReceiveDocumentsAsync(DocString, UserName, Password, DocName, null);
        }
        
        /// <remarks/>
        public void ReceiveDocumentsAsync(string DocString, string UserName, string Password, string DocName, object userState) {
            if ((this.ReceiveDocumentsOperationCompleted == null)) {
                this.ReceiveDocumentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReceiveDocumentsOperationCompleted);
            }
            this.InvokeAsync("ReceiveDocuments", new object[] {
                        DocString,
                        UserName,
                        Password,
                        DocName}, this.ReceiveDocumentsOperationCompleted, userState);
        }
        
        private void OnReceiveDocumentsOperationCompleted(object arg) {
            if ((this.ReceiveDocumentsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReceiveDocumentsCompleted(this, new ReceiveDocumentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://isys.ianetwork.net/ValidateUser", RequestNamespace="http://isys.ianetwork.net/", ResponseNamespace="http://isys.ianetwork.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ValidateUser(string Username, string Password) {
            object[] results = this.Invoke("ValidateUser", new object[] {
                        Username,
                        Password});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ValidateUserAsync(string Username, string Password) {
            this.ValidateUserAsync(Username, Password, null);
        }
        
        /// <remarks/>
        public void ValidateUserAsync(string Username, string Password, object userState) {
            if ((this.ValidateUserOperationCompleted == null)) {
                this.ValidateUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidateUserOperationCompleted);
            }
            this.InvokeAsync("ValidateUser", new object[] {
                        Username,
                        Password}, this.ValidateUserOperationCompleted, userState);
        }
        
        private void OnValidateUserOperationCompleted(object arg) {
            if ((this.ValidateUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidateUserCompleted(this, new ValidateUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://isys.ianetwork.net/ReceiveDocumentsAssignmentCynCast", RequestNamespace="http://isys.ianetwork.net/", ResponseNamespace="http://isys.ianetwork.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ReceiveDocumentsAssignmentCynCast(DOCUMENT_ARCHIVE_FILE_TYPE DocString, string UserName, string Password, string DocName, string AssignmentID, int FolderID, string OrgEntityID) {
            object[] results = this.Invoke("ReceiveDocumentsAssignmentCynCast", new object[] {
                        DocString,
                        UserName,
                        Password,
                        DocName,
                        AssignmentID,
                        FolderID,
                        OrgEntityID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ReceiveDocumentsAssignmentCynCastAsync(DOCUMENT_ARCHIVE_FILE_TYPE DocString, string UserName, string Password, string DocName, string AssignmentID, int FolderID, string OrgEntityID) {
            this.ReceiveDocumentsAssignmentCynCastAsync(DocString, UserName, Password, DocName, AssignmentID, FolderID, OrgEntityID, null);
        }
        
        /// <remarks/>
        public void ReceiveDocumentsAssignmentCynCastAsync(DOCUMENT_ARCHIVE_FILE_TYPE DocString, string UserName, string Password, string DocName, string AssignmentID, int FolderID, string OrgEntityID, object userState) {
            if ((this.ReceiveDocumentsAssignmentCynCastOperationCompleted == null)) {
                this.ReceiveDocumentsAssignmentCynCastOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReceiveDocumentsAssignmentCynCastOperationCompleted);
            }
            this.InvokeAsync("ReceiveDocumentsAssignmentCynCast", new object[] {
                        DocString,
                        UserName,
                        Password,
                        DocName,
                        AssignmentID,
                        FolderID,
                        OrgEntityID}, this.ReceiveDocumentsAssignmentCynCastOperationCompleted, userState);
        }
        
        private void OnReceiveDocumentsAssignmentCynCastOperationCompleted(object arg) {
            if ((this.ReceiveDocumentsAssignmentCynCastCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReceiveDocumentsAssignmentCynCastCompleted(this, new ReceiveDocumentsAssignmentCynCastCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://isys.ianetwork.net/ReceiveDocumentsAssignment", RequestNamespace="http://isys.ianetwork.net/", ResponseNamespace="http://isys.ianetwork.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ReceiveDocumentsAssignment(string DocString, string UserName, string Password, string DocName, string AssignmentID, int FolderID, string OrgEntityID) {
            object[] results = this.Invoke("ReceiveDocumentsAssignment", new object[] {
                        DocString,
                        UserName,
                        Password,
                        DocName,
                        AssignmentID,
                        FolderID,
                        OrgEntityID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ReceiveDocumentsAssignmentAsync(string DocString, string UserName, string Password, string DocName, string AssignmentID, int FolderID, string OrgEntityID) {
            this.ReceiveDocumentsAssignmentAsync(DocString, UserName, Password, DocName, AssignmentID, FolderID, OrgEntityID, null);
        }
        
        /// <remarks/>
        public void ReceiveDocumentsAssignmentAsync(string DocString, string UserName, string Password, string DocName, string AssignmentID, int FolderID, string OrgEntityID, object userState) {
            if ((this.ReceiveDocumentsAssignmentOperationCompleted == null)) {
                this.ReceiveDocumentsAssignmentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReceiveDocumentsAssignmentOperationCompleted);
            }
            this.InvokeAsync("ReceiveDocumentsAssignment", new object[] {
                        DocString,
                        UserName,
                        Password,
                        DocName,
                        AssignmentID,
                        FolderID,
                        OrgEntityID}, this.ReceiveDocumentsAssignmentOperationCompleted, userState);
        }
        
        private void OnReceiveDocumentsAssignmentOperationCompleted(object arg) {
            if ((this.ReceiveDocumentsAssignmentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReceiveDocumentsAssignmentCompleted(this, new ReceiveDocumentsAssignmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://isys.ianetwork.net/VerifyInternalUser", RequestNamespace="http://isys.ianetwork.net/", ResponseNamespace="http://isys.ianetwork.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool VerifyInternalUser(string UserName, string Pass) {
            object[] results = this.Invoke("VerifyInternalUser", new object[] {
                        UserName,
                        Pass});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void VerifyInternalUserAsync(string UserName, string Pass) {
            this.VerifyInternalUserAsync(UserName, Pass, null);
        }
        
        /// <remarks/>
        public void VerifyInternalUserAsync(string UserName, string Pass, object userState) {
            if ((this.VerifyInternalUserOperationCompleted == null)) {
                this.VerifyInternalUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnVerifyInternalUserOperationCompleted);
            }
            this.InvokeAsync("VerifyInternalUser", new object[] {
                        UserName,
                        Pass}, this.VerifyInternalUserOperationCompleted, userState);
        }
        
        private void OnVerifyInternalUserOperationCompleted(object arg) {
            if ((this.VerifyInternalUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.VerifyInternalUserCompleted(this, new VerifyInternalUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://isys.ianetwork.net/VerifyUserCarrier", RequestNamespace="http://isys.ianetwork.net/", ResponseNamespace="http://isys.ianetwork.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool VerifyUserCarrier(string UserName, string Pass) {
            object[] results = this.Invoke("VerifyUserCarrier", new object[] {
                        UserName,
                        Pass});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void VerifyUserCarrierAsync(string UserName, string Pass) {
            this.VerifyUserCarrierAsync(UserName, Pass, null);
        }
        
        /// <remarks/>
        public void VerifyUserCarrierAsync(string UserName, string Pass, object userState) {
            if ((this.VerifyUserCarrierOperationCompleted == null)) {
                this.VerifyUserCarrierOperationCompleted = new System.Threading.SendOrPostCallback(this.OnVerifyUserCarrierOperationCompleted);
            }
            this.InvokeAsync("VerifyUserCarrier", new object[] {
                        UserName,
                        Pass}, this.VerifyUserCarrierOperationCompleted, userState);
        }
        
        private void OnVerifyUserCarrierOperationCompleted(object arg) {
            if ((this.VerifyUserCarrierCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.VerifyUserCarrierCompleted(this, new VerifyUserCarrierCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://isys.ianetwork.net/VerifyUserAppraiser", RequestNamespace="http://isys.ianetwork.net/", ResponseNamespace="http://isys.ianetwork.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool VerifyUserAppraiser(string UserName, string Pass) {
            object[] results = this.Invoke("VerifyUserAppraiser", new object[] {
                        UserName,
                        Pass});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void VerifyUserAppraiserAsync(string UserName, string Pass) {
            this.VerifyUserAppraiserAsync(UserName, Pass, null);
        }
        
        /// <remarks/>
        public void VerifyUserAppraiserAsync(string UserName, string Pass, object userState) {
            if ((this.VerifyUserAppraiserOperationCompleted == null)) {
                this.VerifyUserAppraiserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnVerifyUserAppraiserOperationCompleted);
            }
            this.InvokeAsync("VerifyUserAppraiser", new object[] {
                        UserName,
                        Pass}, this.VerifyUserAppraiserOperationCompleted, userState);
        }
        
        private void OnVerifyUserAppraiserOperationCompleted(object arg) {
            if ((this.VerifyUserAppraiserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.VerifyUserAppraiserCompleted(this, new VerifyUserAppraiserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://isys.ianetwork.net/ValidateIsysID", RequestNamespace="http://isys.ianetwork.net/", ResponseNamespace="http://isys.ianetwork.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ValidateIsysID(int IsysID) {
            object[] results = this.Invoke("ValidateIsysID", new object[] {
                        IsysID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ValidateIsysIDAsync(int IsysID) {
            this.ValidateIsysIDAsync(IsysID, null);
        }
        
        /// <remarks/>
        public void ValidateIsysIDAsync(int IsysID, object userState) {
            if ((this.ValidateIsysIDOperationCompleted == null)) {
                this.ValidateIsysIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidateIsysIDOperationCompleted);
            }
            this.InvokeAsync("ValidateIsysID", new object[] {
                        IsysID}, this.ValidateIsysIDOperationCompleted, userState);
        }
        
        private void OnValidateIsysIDOperationCompleted(object arg) {
            if ((this.ValidateIsysIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidateIsysIDCompleted(this, new ValidateIsysIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://isys.ianetwork.net/ValidateIsysIDAndAppraiserUser", RequestNamespace="http://isys.ianetwork.net/", ResponseNamespace="http://isys.ianetwork.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ValidateIsysIDAndAppraiserUser(int IsysID, string UserName, string Password) {
            object[] results = this.Invoke("ValidateIsysIDAndAppraiserUser", new object[] {
                        IsysID,
                        UserName,
                        Password});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ValidateIsysIDAndAppraiserUserAsync(int IsysID, string UserName, string Password) {
            this.ValidateIsysIDAndAppraiserUserAsync(IsysID, UserName, Password, null);
        }
        
        /// <remarks/>
        public void ValidateIsysIDAndAppraiserUserAsync(int IsysID, string UserName, string Password, object userState) {
            if ((this.ValidateIsysIDAndAppraiserUserOperationCompleted == null)) {
                this.ValidateIsysIDAndAppraiserUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidateIsysIDAndAppraiserUserOperationCompleted);
            }
            this.InvokeAsync("ValidateIsysIDAndAppraiserUser", new object[] {
                        IsysID,
                        UserName,
                        Password}, this.ValidateIsysIDAndAppraiserUserOperationCompleted, userState);
        }
        
        private void OnValidateIsysIDAndAppraiserUserOperationCompleted(object arg) {
            if ((this.ValidateIsysIDAndAppraiserUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidateIsysIDAndAppraiserUserCompleted(this, new ValidateIsysIDAndAppraiserUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://isys.ianetwork.net/")]
    public partial class FileStream : Stream {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FileStream))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://isys.ianetwork.net/")]
    public abstract partial class Stream : MarshalByRefObject {
        
        private long positionField;
        
        private int readTimeoutField;
        
        private int writeTimeoutField;
        
        /// <remarks/>
        public long Position {
            get {
                return this.positionField;
            }
            set {
                this.positionField = value;
            }
        }
        
        /// <remarks/>
        public int ReadTimeout {
            get {
                return this.readTimeoutField;
            }
            set {
                this.readTimeoutField = value;
            }
        }
        
        /// <remarks/>
        public int WriteTimeout {
            get {
                return this.writeTimeoutField;
            }
            set {
                this.writeTimeoutField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Stream))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FileStream))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://isys.ianetwork.net/")]
    public abstract partial class MarshalByRefObject {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.fixauto.com/WebServices")]
    public partial class DOCUMENT_ARCHIVE_FILE_TYPE {
        
        private string fileNameField;
        
        private byte[] docStreamField;
        
        /// <remarks/>
        public string FileName {
            get {
                return this.fileNameField;
            }
            set {
                this.fileNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] DocStream {
            get {
                return this.docStreamField;
            }
            set {
                this.docStreamField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void LoadEMSCompletedEventHandler(object sender, LoadEMSCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadEMSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoadEMSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void UpLoadEMSCompletedEventHandler(object sender, UpLoadEMSCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpLoadEMSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpLoadEMSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void LoadEMSWithResultsCompletedEventHandler(object sender, LoadEMSWithResultsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadEMSWithResultsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoadEMSWithResultsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetAssignmentID_FileNumberCompletedEventHandler(object sender, GetAssignmentID_FileNumberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAssignmentID_FileNumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAssignmentID_FileNumberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GeIsysID_ClaimNumberCompletedEventHandler(object sender, GeIsysID_ClaimNumberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GeIsysID_ClaimNumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GeIsysID_ClaimNumberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetClaimNumberbyIsysIDCompletedEventHandler(object sender, GetClaimNumberbyIsysIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetClaimNumberbyIsysIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetClaimNumberbyIsysIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetClaimNumberRequiredCompletedEventHandler(object sender, GetClaimNumberRequiredCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetClaimNumberRequiredCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetClaimNumberRequiredCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void AddAuditNoteCompletedEventHandler(object sender, AddAuditNoteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddAuditNoteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddAuditNoteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetEMSForAssignmentCompletedEventHandler(object sender, GetEMSForAssignmentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEMSForAssignmentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEMSForAssignmentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetAssignment_AuditResultsCompletedEventHandler(object sender, GetAssignment_AuditResultsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAssignment_AuditResultsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAssignment_AuditResultsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void ReceivePictureCompletedEventHandler(object sender, ReceivePictureCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReceivePictureCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReceivePictureCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void ReceivePictureToAssignmentID_NewCompletedEventHandler(object sender, ReceivePictureToAssignmentID_NewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReceivePictureToAssignmentID_NewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReceivePictureToAssignmentID_NewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void ReceivePictureToAssignmentID_NewLargeFileCompletedEventHandler(object sender, ReceivePictureToAssignmentID_NewLargeFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReceivePictureToAssignmentID_NewLargeFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReceivePictureToAssignmentID_NewLargeFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void ReceivePictureToAssignmentIDCompletedEventHandler(object sender, ReceivePictureToAssignmentIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReceivePictureToAssignmentIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReceivePictureToAssignmentIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void ReceiveDocumentsCompletedEventHandler(object sender, ReceiveDocumentsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReceiveDocumentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReceiveDocumentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void ValidateUserCompletedEventHandler(object sender, ValidateUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ValidateUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ValidateUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void ReceiveDocumentsAssignmentCynCastCompletedEventHandler(object sender, ReceiveDocumentsAssignmentCynCastCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReceiveDocumentsAssignmentCynCastCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReceiveDocumentsAssignmentCynCastCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void ReceiveDocumentsAssignmentCompletedEventHandler(object sender, ReceiveDocumentsAssignmentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReceiveDocumentsAssignmentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReceiveDocumentsAssignmentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void VerifyInternalUserCompletedEventHandler(object sender, VerifyInternalUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class VerifyInternalUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal VerifyInternalUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void VerifyUserCarrierCompletedEventHandler(object sender, VerifyUserCarrierCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class VerifyUserCarrierCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal VerifyUserCarrierCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void VerifyUserAppraiserCompletedEventHandler(object sender, VerifyUserAppraiserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class VerifyUserAppraiserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal VerifyUserAppraiserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void ValidateIsysIDCompletedEventHandler(object sender, ValidateIsysIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ValidateIsysIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ValidateIsysIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void ValidateIsysIDAndAppraiserUserCompletedEventHandler(object sender, ValidateIsysIDAndAppraiserUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ValidateIsysIDAndAppraiserUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ValidateIsysIDAndAppraiserUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591